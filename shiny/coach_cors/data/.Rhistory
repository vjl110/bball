library(XML)
theurl <- "http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=orb_pct&c1comp=ge&c1val=&c2stat=efg_pct&c2comp=ge&c2val=&c3stat=tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=0"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- tables[[which.max(n.rows)]]
i <- 0
while(length(n.rows != 1)){
i <- i + 100
theurl <- paste(c("http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=orb_pct&c1comp=ge&c1val=&c2stat=efg_pct&c2comp=ge&c2val=&c3stat=tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=", 0 + i),sep="",collapse="")
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- rbind(base, tables[[which.max(n.rows)]])
}
i
tail(base)
i <- 2400
while(length(n.rows != 1)){
i <- i + 100
theurl <- paste(c("http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=orb_pct&c1comp=ge&c1val=&c2stat=efg_pct&c2comp=ge&c2val=&c3stat=tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=", 0 + i),sep="",collapse="")
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- rbind(base, tables[[which.max(n.rows)]])
}
off <- base
nrow(off)
# DEFENSE
theurl <- "http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=opp_orb_pct&c1comp=ge&c1val=&c2stat=opp_efg_pct&c2comp=ge&c2val=&c3stat=opp_tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=0"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- tables[[which.max(n.rows)]]
i <- 0
i <- 2600
while(length(n.rows != 1)){
i <- i + 100
theurl <- paste(c("http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=opp_orb_pct&c1comp=ge&c1val=&c2stat=opp_efg_pct&c2comp=ge&c2val=&c3stat=opp_tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=", 0 + i),sep="",collapse="")
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- rbind(base, tables[[which.max(n.rows)]])
}
nrow(main)
nrow(base)
def <- base
colnames(def)
head(def)
def <- data.frame("lnup" = base$lineup, "D.poss" = base$Opp, "D.efg" = base$eFG%, "D.tov" = base$TOV/base$Opp, "D.orb" = base$ORB%, "D.drb" = base$DRB%, "D.FTR" = base$FT/base$FGA)
def <- data.frame("lineup" = base$lineup, "D.poss" = base$Opp, "D.efg" = base$eFG%, "D.tov" = base$TOV/base$Opp, "D.orb" = base$ORB%, "D.drb" = base$DRB%, "D.FTR" = base$FT/base$FGA)
head(base$ORB%)
head(base$3PA)
head(base$DRB)
head(base$ORB.)
base$ORB.
def <- data.frame("lineup" = base$lineup, "D.poss" = base$Opp, "D.efg" = base[,16], "D.tov" = base$TOV/base$Opp, "D.orb" = base[,22], "D.drb" = base[,24], "D.FTR" = base$FT/base$FGA)
for(base in c(6, 8:31)){
base[,i] <- as.numeric(as.character(base[,i]))
}
colnames(base)
head(base)
theurl <- "http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=opp_orb_pct&c1comp=ge&c1val=&c2stat=opp_efg_pct&c2comp=ge&c2val=&c3stat=opp_tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=0"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- tables[[which.max(n.rows)]]
i <- 0
while(length(n.rows != 1)){
i <- i + 100
theurl <- paste(c("http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=opp_orb_pct&c1comp=ge&c1val=&c2stat=opp_efg_pct&c2comp=ge&c2val=&c3stat=opp_tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=", 0 + i),sep="",collapse="")
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- rbind(base, tables[[which.max(n.rows)]])
}
for(base in c(6, 8:31)){
base[,i] <- as.numeric(as.character(base[,i]))
}
head(base)
base
i
library(XML)
theurl <- "http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=orb_pct&c1comp=ge&c1val=&c2stat=efg_pct&c2comp=ge&c2val=&c3stat=tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=0"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- tables[[which.max(n.rows)]]
i <- 0
base
head(base)
while(length(n.rows != 1)){
i <- i + 100
theurl <- paste(c("http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=orb_pct&c1comp=ge&c1val=&c2stat=efg_pct&c2comp=ge&c2val=&c3stat=tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=", 0 + i),sep="",collapse="")
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- rbind(base, tables[[which.max(n.rows)]])
}
head(base)
nrow(base)
for(base in c(6, 8:31)){
base[,i] <- as.numeric(as.character(base[,i]))
}
nrow(base)
library(XML)
theurl <- "http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=orb_pct&c1comp=ge&c1val=&c2stat=efg_pct&c2comp=ge&c2val=&c3stat=tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=0"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- tables[[which.max(n.rows)]]
i <- 0
while(length(n.rows != 1)){
i <- i + 100
theurl <- paste(c("http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=orb_pct&c1comp=ge&c1val=&c2stat=efg_pct&c2comp=ge&c2val=&c3stat=tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=", 0 + i),sep="",collapse="")
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- rbind(base, tables[[which.max(n.rows)]])
}
off <- base
head(off)
theurl <- "http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=opp_orb_pct&c1comp=ge&c1val=&c2stat=opp_efg_pct&c2comp=ge&c2val=&c3stat=opp_tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=0"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- tables[[which.max(n.rows)]]
i <- 0
while(length(n.rows != 1)){
i <- i + 100
theurl <- paste(c("http://www.basketball-reference.com/play-index/plus/lineup_finder.cgi?request=1&player_id=&match=single&lineup_type=5-man&output=total&year_id=2014&is_playoffs=&team_id=&opp_id=&game_num_min=0&game_num_max=99&game_month=&game_location=&game_result=&c1stat=opp_orb_pct&c1comp=ge&c1val=&c2stat=opp_efg_pct&c2comp=ge&c2val=&c3stat=opp_tov&c3comp=ge&c3val=&c4stat=&c4comp=ge&c4val=&order_by=mp&order_by_asc=&offset=", 0 + i),sep="",collapse="")
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
base <- rbind(base, tables[[which.max(n.rows)]])
}
def <- base
head(def)
def2 <- def[-c(2:5)]
head(def2)
def2 <- def[-c(2:8)]
head(def2)
head(def)
def2 <- def[-c(1, 3:8)]
head(def2)
def2 <- def[-c(1, 3:9)]
head(def2)
tst <- merge(off, def, by = "Lineup")
colnames(off)
colnames(off)[3] <- "Team"
colnames(off)
tst <- merge(off, def, by = "Lineup")
head(tst)
tst <- merge(off, def2, by = "Lineup")
head(tst)
nrow(tst)
nrow(off)
nrow(def)
tst <- merge(off, def2, by = "Lineup", all.xy = T)
nrow(tst)
?merge
tst <- merge(off, def2, by = "Lineup", all.x = FALSE)
nrow(tst)
tail(tst)
hist(tst$MP)
hist(as.numeric(as.character(tst$MP)))
max(as.numeric(as.character(tst$MP)))
max(as.numeric(as.character(tst$MP)), na.rm =T)
subset(tst, as.numeric(as.character(MP)) > 1800 )
subset(tst, as.numeric(as.character(MP)) > 1700 )
subset(tst, as.numeric(as.character(MP)) > 1500 )
rm(list=ls())
setwd("~/GitHub/bball")
###########
######## Position finder
##
nba <- read.csv("data/draftmod/BBRtot.csv")
nba <- data.frame("Name" = nba$Name, "Pos" = nba$Pos)
nba <- na.omit(nba)
nba <- aggregate( . ~ Name, data = nba, mean)
nba$Pos <- round(nba$Pos, 0)
load("data/draftmod/ncaa_indi")
ncaa <- data.frame("Name"=ncaa$Name, "Season"=ncaa$Season, "MP"=ncaa$MP, "Height"=ncaa$Height, "Weight"=ncaa$Weight, "X2PA"=ncaa$X2PA, "X3PA"=ncaa$X3PA, "FTA"=ncaa$FTA, "AST"=ncaa$AST, "TOV"=ncaa$TOV, "TRB"=ncaa$TRB, "STL"=ncaa$STL, "BLK"=ncaa$BLK, "FL"=ncaa$PF)
load("data/draftmod/euro")
euro <- data.frame("Name"=euro$Name, "Season"=euro$Season, "MP"=euro$MP, "Height"=euro$Height, "Weight"=euro$Weight, "X2PA"=euro$X2PA, "X3PA"=euro$X3PA, "FTA"=euro$FTA, "AST"=euro$AST, "TOV"=euro$TOV, "TRB"=euro$ORB+euro$DRB, "STL"=euro$STL, "BLK"=euro$BLK, "FL"=euro$PF)
pos <- rbind(ncaa, euro)
pos <- merge(pos, nba, by = "Name", all.x = T)
pos$Pos <- as.factor(pos$Pos)
library(nnet)
pos.mdl <- multinom(Pos ~
Height + Weight +
I(X2PA + X3PA) + I(X2PA/(X2PA + X3PA)) + FTA +
AST +
TRB +
BLK + STL + FL
, data=pos, weights = MP)
summary(pos.mdl)
POS <- data.frame("PRB" = round(predict(pos.mdl, newdata=pos, "probs"), digits=2))
colnames(POS) <- c("PG", "SG", "SF", "PF", "C")
POS <- cbind(pos[,1:2], POS)
POS <- POS[order(POS$Season, decreasing = T), ]
POS <- na.omit(subset(POS, !duplicated(Name)))
for(i in 1:nrow(POS)){
POS$Pos[i] <- POS$PG[i] + POS$SG[i]*2 + POS$SF[i]*3 + POS$PF[i]*4 + POS$C[i]*5
}
POS <- POS[-c(2:7)]
##
###### EWP MODELS
###
load("data/draftmod/ncaa_indi")
load("data/draftmod/euro")
load("data/draftmod/eu.inf")
ac <- read.csv("data/draftmod/agecurve.csv")
ac.lws <- loess(ac$Curve.cen ~ ac$Age, span = 1)
#
### NCAA
ncaa <- merge(ncaa, POS, by = "Name", all.x = T)
ncaa$OBS[ncaa$OBS < 0] <- 0
m1 <-     glm(OBS ~
I(predict(ac.lws, newdata= Age)) + I(MP/G) + SOS*MOV + EXP +
tmPTS + X2P + X3P + FT + X2PA + X3PA + I((tmX2PA - X2PA)/((tmX3PA - X3PA) + (tmX2PA - X2PA))) +
AST*TOV +
TRB + tmTRB +
STL + BLK + I(tmSTL - STL) + I(tmBLK - BLK) +
tmPF +
Height,
weights = MP, data = ncaa, family = quasipoisson)
fit <- data.frame("EWP" = as.data.frame(predict(m1, newdata = ncaa, type = "response", se.fit = TRUE))$fit)
ncaa.ewp <- data.frame("Name" = ncaa$Name, "League" = "NCAA", "Team" = ncaa$Tm, "Season" = ncaa$Season, "MP" = ncaa$MP, "OBS" = ncaa$OBS, fit)
ncaa.ewp <- subset(ncaa.ewp, !is.na(EWP))
for(i in 1:nrow(ncaa.ewp)){
compset <- c(ncaa.ewp$EWP[i], ncaa.ewp$EWP[ncaa.ewp$Name != ncaa.ewp$Name[i]])
obs <- na.omit(ncaa.ewp$OBS)
ncaa.ewp$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
}
ncaa.ewp$EWP <- ncaa.ewp$adj
ncaa.ewp <- ncaa.ewp[-ncol(ncaa.ewp)]
#
### EURO
#prep
obs.imp <- ncaa.ewp[order(ncaa.ewp$Season, decreasing = TRUE),]
obs.imp <- subset(obs.imp, !duplicated(Name))[c(1,7)]
euro$Name <- as.character(euro$Name)
obs.imp$Name <- as.character(obs.imp$Name)
euro <- merge(euro, obs.imp, by = "Name", all.x=T)
euro$OBS[is.na(euro$OBS)] <- euro$EWP[is.na(euro$OBS)]
euro <- euro[-ncol(euro)]
#run
euro$OBS[euro$OBS < 0] <- 0
for(i in 1:nrow(euro)){
euro$CBA[i] <- ifelse(eu.inf$League[eu.inf$Name == euro$Name[i] & eu.inf$Season == euro$Season[i]] == "CBA", 1, 0)
}
m1 <- randomForest(OBS ~
Pick + Age + EXP + EWP + SOS + MOV +
X2P + X3P + FT + X2PA + X3PA + FTA +
AST + TOV +
TRB +
STL + BLK + PF +
Height,
data = um.ncaa , weights = MP, importance=TRUE, na.action=na.omit)
m1 <- randomForest(OBS ~
Pick + Age + EXP + EWP + SOS + MOV +
X2P + X3P + FT + X2PA + X3PA + FTA +
AST + TOV +
TRB +
STL + BLK + PF +
Height,
data = hum.ncaa , weights = MP, importance=TRUE, na.action=na.omit)
library(randomForest)
m1 <- randomForest(OBS ~
Pick + Age + EXP + EWP + SOS + MOV +
X2P + X3P + FT + X2PA + X3PA + FTA +
AST + TOV +
TRB +
STL + BLK + PF +
Height,
data = hum.ncaa , weights = MP, importance=TRUE, na.action=na.omit)
hum.ncaa <- merge(ncaa.ewp, ncaa, by = c("Name", "Season", "MP", "OBS"), all.x = T)
hum.ncaa <- merge(hum.ncaa, drft, by = "Name", all.x = T)
hum.ncaa$Pick <- predict(lws.pick, newdata=hum.ncaa$Pick)
hum.ncaa <- subset(hum.ncaa, DRFT >= 1990)
hum.ncaa$Pick[is.na(hum.ncaa$Pick)] <- min(hum.ncaa$Pick, na.rm=T)
rm(list=ls())
setwd("~/GitHub/bball")
###########
######## Position finder
##
nba <- read.csv("data/draftmod/BBRtot.csv")
nba <- data.frame("Name" = nba$Name, "Pos" = nba$Pos)
nba <- na.omit(nba)
nba <- aggregate( . ~ Name, data = nba, mean)
nba$Pos <- round(nba$Pos, 0)
load("data/draftmod/ncaa_indi")
ncaa <- data.frame("Name"=ncaa$Name, "Season"=ncaa$Season, "MP"=ncaa$MP, "Height"=ncaa$Height, "Weight"=ncaa$Weight, "X2PA"=ncaa$X2PA, "X3PA"=ncaa$X3PA, "FTA"=ncaa$FTA, "AST"=ncaa$AST, "TOV"=ncaa$TOV, "TRB"=ncaa$TRB, "STL"=ncaa$STL, "BLK"=ncaa$BLK, "FL"=ncaa$PF)
load("data/draftmod/euro")
euro <- data.frame("Name"=euro$Name, "Season"=euro$Season, "MP"=euro$MP, "Height"=euro$Height, "Weight"=euro$Weight, "X2PA"=euro$X2PA, "X3PA"=euro$X3PA, "FTA"=euro$FTA, "AST"=euro$AST, "TOV"=euro$TOV, "TRB"=euro$ORB+euro$DRB, "STL"=euro$STL, "BLK"=euro$BLK, "FL"=euro$PF)
pos <- rbind(ncaa, euro)
pos <- merge(pos, nba, by = "Name", all.x = T)
pos$Pos <- as.factor(pos$Pos)
library(nnet)
pos.mdl <- multinom(Pos ~
Height + Weight +
I(X2PA + X3PA) + I(X2PA/(X2PA + X3PA)) + FTA +
AST +
TRB +
BLK + STL + FL
, data=pos, weights = MP)
summary(pos.mdl)
POS <- data.frame("PRB" = round(predict(pos.mdl, newdata=pos, "probs"), digits=2))
colnames(POS) <- c("PG", "SG", "SF", "PF", "C")
POS <- cbind(pos[,1:2], POS)
POS <- POS[order(POS$Season, decreasing = T), ]
POS <- na.omit(subset(POS, !duplicated(Name)))
for(i in 1:nrow(POS)){
POS$Pos[i] <- POS$PG[i] + POS$SG[i]*2 + POS$SF[i]*3 + POS$PF[i]*4 + POS$C[i]*5
}
POS <- POS[-c(2:7)]
##
###### EWP MODELS
###
load("data/draftmod/ncaa_indi")
load("data/draftmod/euro")
load("data/draftmod/eu.inf")
ac <- read.csv("data/draftmod/agecurve.csv")
ac.lws <- loess(ac$Curve.cen ~ ac$Age, span = 1)
#
### NCAA
ncaa <- merge(ncaa, POS, by = "Name", all.x = T)
ncaa$OBS[ncaa$OBS < 0] <- 0
m1 <-     glm(OBS ~
I(predict(ac.lws, newdata= Age)) + I(MP/G) + SOS*MOV + EXP +
tmPTS + X2P + X3P + FT + X2PA + X3PA + I((tmX2PA - X2PA)/((tmX3PA - X3PA) + (tmX2PA - X2PA))) +
AST*TOV +
TRB + tmTRB +
STL + BLK + I(tmSTL - STL) + I(tmBLK - BLK) +
tmPF +
Height,
weights = MP, data = ncaa, family = quasipoisson)
fit <- data.frame("EWP" = as.data.frame(predict(m1, newdata = ncaa, type = "response", se.fit = TRUE))$fit)
ncaa.ewp <- data.frame("Name" = ncaa$Name, "League" = "NCAA", "Team" = ncaa$Tm, "Season" = ncaa$Season, "MP" = ncaa$MP, "OBS" = ncaa$OBS, fit)
ncaa.ewp <- subset(ncaa.ewp, !is.na(EWP))
for(i in 1:nrow(ncaa.ewp)){
compset <- c(ncaa.ewp$EWP[i], ncaa.ewp$EWP[ncaa.ewp$Name != ncaa.ewp$Name[i]])
obs <- na.omit(ncaa.ewp$OBS)
ncaa.ewp$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
}
ncaa.ewp$EWP <- ncaa.ewp$adj
ncaa.ewp <- ncaa.ewp[-ncol(ncaa.ewp)]
#
### EURO
#prep
obs.imp <- ncaa.ewp[order(ncaa.ewp$Season, decreasing = TRUE),]
obs.imp <- subset(obs.imp, !duplicated(Name))[c(1,7)]
euro$Name <- as.character(euro$Name)
obs.imp$Name <- as.character(obs.imp$Name)
euro <- merge(euro, obs.imp, by = "Name", all.x=T)
euro$OBS[is.na(euro$OBS)] <- euro$EWP[is.na(euro$OBS)]
euro <- euro[-ncol(euro)]
#run
euro$OBS[euro$OBS < 0] <- 0
for(i in 1:nrow(euro)){
euro$CBA[i] <- ifelse(eu.inf$League[eu.inf$Name == euro$Name[i] & eu.inf$Season == euro$Season[i]] == "CBA", 1, 0)
}
m2 <- glm(OBS ~
I(predict(ac.lws, newdata= Age)) +
PTS_tm + X2P + X3P + FT + X2PA + X3PA + I((X2PA_tm - X2PA)/((X3PA_tm - X3PA) + (X2PA_tm - X2PA))) +
AST*TOV +
DRB + I((ORB_tm + DRB_tm) - (ORB + DRB)) +
STL + BLK + I(STL_tm - STL) +
PF + I(PF_tm - PF) +
Height + CBA,
weights = ifelse(Age <= 22, MP*5, MP), data = euro, family = quasipoisson)
fit <- data.frame("EWP" = as.data.frame(predict(m2, newdata = euro, type = "response", se.fit = TRUE))$fit)
euro.ewp <- data.frame("Name" = euro$Name, "League" = NA, "Team" = NA, "Season" = euro$Season, "MP" = euro$MP, "OBS" = euro$OBS, fit)
euro.ewp <- subset(euro.ewp, !is.na(EWP))
euro.ewp$Name <- as.character(euro.ewp$Name)
eu.inf$Name <- as.character(eu.inf$Name)
eu.inf$Team <- as.character(eu.inf$Team)
for(i in 1:nrow(euro.ewp)){
lgs <- unique(eu.inf$League[eu.inf$Name == euro.ewp$Name[i] & eu.inf$Season == euro.ewp$Season[i]])
tms <- unique(eu.inf$Team[eu.inf$Name == euro.ewp$Name[i] & eu.inf$Season == euro.ewp$Season[i]])
#leagues
if(length(lgs) == 3){
euro.ewp$League[i] <- paste(lgs[1], lgs[2], lgs[3], sep = "/")
}else if(length(lgs) == 2){
euro.ewp$League[i] <- paste(lgs[1], lgs[2], sep = "/")
}else{
euro.ewp$League[i] <- as.character(lgs[1])
}
#teams
if(length(tms) == 3){
euro.ewp$Team[i] <- paste(tms[1], tms[2], tms[3], sep = "/")
}else if(length(tms) == 2){
euro.ewp$Team[i] <- paste(tms[1], tms[2], sep = "/")
}else{
euro.ewp$Team[i] <- as.character(tms[1])
}
}
for(i in 1:nrow(euro.ewp)){
compset <- c(euro.ewp$EWP[i], euro.ewp$EWP[euro.ewp$Name != euro.ewp$Name[i]])
obs <- na.omit(euro.ewp$OBS)
euro.ewp$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
}
euro.ewp$EWP <- euro.ewp$adj
euro.ewp <- euro.ewp[-ncol(euro.ewp)]
### Combine and organize NCAA and Euro
ewp <- rbind(ncaa.ewp, euro.ewp)
ewp <- ewp[order(ewp$Season, decreasing = T), ]
###########
##############
##########
#
## Humble model
#
# Scale draft order...
drft <- read.csv("data/draftmod/Drafts.csv", strip.white=T)
PICK <- merge(ewp, drft, by="Name", all.x=TRUE)
PICK <- subset(PICK, !is.na(Pick))
lws.pick <- loess(PICK$OBS ~ PICK$Pick, span=0.85)
####	Prep random forest data
hum.ncaa <- merge(ncaa.ewp, ncaa, by = c("Name", "Season", "MP", "OBS"), all.x = T)
hum.ncaa <- merge(hum.ncaa, drft, by = "Name", all.x = T)
hum.ncaa$Pick <- predict(lws.pick, newdata=hum.ncaa$Pick)
hum.ncaa <- subset(hum.ncaa, DRFT >= 1990)
hum.ncaa$Pick[is.na(hum.ncaa$Pick)] <- min(hum.ncaa$Pick, na.rm=T)
hum.euro <- merge(euro.ewp, euro, by = c("Name", "Season", "MP", "OBS"), all.x = T)
hum.euro <- merge(hum.euro, drft, by = "Name", all.x = T)
hum.euro$Pick <- predict(lws.pick, newdata=hum.euro$Pick)
hum.euro <- subset(hum.euro, DRFT >= 1990)
hum.euro$Pick[is.na(hum.euro$Pick)] <- min(hum.euro$Pick, na.rm=T)
#####
library(randomForest)
case.ncaa <- data.frame("Name" = hum.ncaa$Name, "Season" = hum.ncaa$Season)
case.euro <- data.frame("Name" = hum.euro$Name, "Season" = hum.euro$Season)
for(i in 1990:2015){
m1 <- randomForest(OBS ~
Pick + Age + EXP + EWP + SOS + MOV +
X2P + X3P + FT + X2PA + X3PA + FTA +
AST + TOV +
TRB +
STL + BLK + PF +
Height,
data = subset(hum.ncaa, Season != i), weights = MP, importance=TRUE, na.action=na.omit)
case.ncaa$PRD[hum.ncaa$Season == i] <- predict(m1, subset(hum.ncaa, Season == i))
}
ncaa.hum <- data.frame("Name" = case.ncaa$Name, "Season" = case.ncaa$Season, "HUM" = round(case.ncaa$PRD, 1))
ncaa.hum <- subset(ncaa.hum, !is.na(HUM))
for(i in 1:nrow(ncaa.hum)){
compset <- c(ncaa.hum$HUM[i], ncaa.hum$HUM[ncaa.hum$Name != ncaa.hum$Name[i]])
obs <- na.omit(ncaa.ewp$OBS)
ncaa.hum$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
}
ncaa.hum$HUM <- ncaa.hum$adj
ncaa.hum <- ncaa.hum[-ncol(ncaa.hum)]
install.packages("hydroGOF")
library(hydroGOF)
head(ncaa_hum)
head(ncaa.hum)
head(nba)
head(ncaa)
colnames(ncaa)
tst <- ncaa[c(1, 41)]
head(tst)
tst <- subset(tst, !duplicated(Name))
tst <- na.omit(tst)
tst2 <- merge(ncaa.hum, tst, by = "Name", all.x = T)
head(tst2)
tst2 <- na.omit(tst2)
rmse(tst2$HUM, tst2$OBS)
head(ncaa)
subset(ncaa, X3PA > 5)
subset(ncaa, Name == "Doug McDermott")
5/11.1
tst <- subset(ncaa, X3PA > 7.5 & X3P/X3PA > .4)
head(tst)
setwd("~/GitHub/bball/shiny/coach_cors/data")
dat <- read.csv("corset.csv")
head(dat)
hist(dat$X3PA)
subset(dat, X3PA > 2)
dat <- subset(dat, X3PA > 2)
subset(dat, Name == "Doug McDermott")
dat <- subset(dat, X3PER > 2)
plot(dat$X3PER, dat$X3PER.nba)
head(dat)
dat <- read.csv("corset.csv")
dat <- subset(dat, X3PA > 2)
plot(dat$X3PER, dat$X3PER.nba)
text(dat$X3PER, dat$X3PER.nba, label = dat$Name)
plot(dat$X3PER, dat$X3PER.nba, xlab = "NCAA 3pnt% (in z-scores)", ylab "NBA career 3pnt% (in z-scores)")
plot(dat$X3PER, dat$X3PER.nba, xlab = "NCAA 3pnt% (in z-scores)", ylab = "NBA career 3pnt% (in z-scores)")
text(dat$X3PER, dat$X3PER.nba, label = dat$Name, cex = .75)
png("shootrz.png", height=500, width=500)
plot(dat$X3PER, dat$X3PER.nba, xlab = "NCAA 3pnt% (in z-scores)", ylab = "NBA career 3pnt% (in z-scores)")
text(dat$X3PER, dat$X3PER.nba, label = dat$Name, cex = .75)
dev.off()
