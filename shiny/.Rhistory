tot <- aggregate( . ~ Name + Season, data = tot, sum)
tot <- tot[order(tot$Season), ]
tot <- subset(tot, !duplicated(Name))
colnames(tot) <- c("Name", "Season", "MP.nba", "X2P.nba", "X2PA.nba", "X3P.nba", "X3PA.nba", "FT.nba", "FTA.nba", "ORB.nba", "DRB.nba", "AST.nba", "STL.nba", "BLK.nba", "TOV.nba", "PF.nba", "PTS.nba")
for(j in 4:ncol(tot)){
tot[,j] <- tot[,j]/tot$MP.nba*40
}
loc <- read.csv("data/BBRloc.csv")[c(1:2, 9:23)]
loc <- loc[order(loc$Season), ]
loc <- subset(loc, !duplicated(Name))
hm <- read.csv("data/hoopmath.csv")[c(1:2, 7:15)]
hm$asd <- hm$atRIM*hm$asdRIM + hm$atJMP*hm$asdJMP + hm$X3PA*hm$asd3
rmhld <- hm$atRIM
jphld <- hm$atJMP
hm$atRIM <- rmhld/(rmhld+jphld) # convert to % of 2s rather than of all shots
hm$atJMP <- jphld/(rmhld+jphld)
hm <- hm[-c(5, 8:11)]
dft <- read.csv("data/Drafts.csv")[1:2]
load("data/euro")
euro <- data.frame(euro[1:2], "Tm"=NA, euro[c(4, 6:12)], "TRB"= euro$DRB + euro$ORB, euro[14:19], "MOV"=NA, "SOS"=NA, euro[c(37:42, 44:45, 47)], "atRIM"=NA, "RIM."=NA, "atJMP"=NA, "JMP."=NA, "asd"=NA)
load("lws.pick")
ncaa <- merge(ncaa, hm, by = c("Name", "Season"), all.x = T)
nba <- merge(tot, loc, by = c("Name", "Season"), all.x = T)[-2]
ncaanba <- merge(euro, nba, by = c("Name"), all.x = T)
euronba <- merge(ncaa, nba, by = c("Name"), all.x = T)
dat <- rbind(ncaanba, euronba)
dat <- merge(dat, dft, by = "Name", all.x = T)
dat$Pick[is.na(dat$Pick)] <- 61
dat$Pick <- predict(lws.pick, newdata=dat$Pick)
rim1 <- lm(atRIM ~
per0.3 + I(X2PA/(X2PA+X3PA)) + I(X2P/X2PA) + Height +
I(FTA/(X2PA+X3PA)) + I(FT/FTA) + X3P + STL
, weights = MP, data = dat)
rim2 <- lm(atRIM ~
I(X2PA/(X2PA+X3PA)) + I(X2P/X2PA) + Height +
I(FTA/(X2PA+X3PA)) + I(FT/FTA) + X3P + STL
, weights = MP, data = dat)
asd1 <- lm(asd ~
Asd.2 + AST + I(X2PA/(X2PA+X3PA)) + I(FTA/(X2PA+X3PA)) + TRB + I(X2PA + X3PA) +
per0.3 + per10.16 + Height
, weights = MP, data = dat)
asd2 <- lm(asd ~
AST + I(X2PA/(X2PA+X3PA)) + I(FTA/(X2PA+X3PA)) + TRB + I(X2PA + X3PA) + Height
, weights = MP, data = dat)
nsvert <- lm(NS_vert ~
Height*Weight + Pick + MOV + SOS +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + PF + perDNK +
AST.nba + STL.nba + I(ORB.nba + DRB.nba)
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
nsvert.2 <- lm(NS_vert ~
Height*Weight + Pick +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + PF + perDNK +
AST.nba + STL.nba + I(ORB.nba + DRB.nba)
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
nsvert.3 <- lm(NS_vert ~
Height*Weight + Pick + MOV + SOS +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + STL + BLK + TRB + PF
, weights = MP, data = dat)
nsvert.4 <- lm(NS_vert ~
Height*Weight + Pick +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + STL + BLK + TRB + PF
, weights = MP, data = dat)
nsvert.5 <- lm(NS_vert ~
Height*Weight +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + STL + BLK + TRB + PF
, weights = MP, data = dat)
mxvert <- lm(max_vert ~
Height*Weight + Pick + MOV + SOS +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + perDNK +
AST.nba + STL.nba + BLK.nba + I(ORB.nba + DRB.nba) + PF.nba
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
mxvert.2 <- lm(max_vert ~
Height*Weight + Pick +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + perDNK +
AST.nba + STL.nba + BLK.nba + I(ORB.nba + DRB.nba) + PF.nba
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
mxvert.3 <- lm(max_vert ~
Height*Weight + Pick + MOV + SOS +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + STL + BLK + TRB + PF
, weights = MP, data = dat)
mxvert.4 <- lm(max_vert ~
Height*Weight + Pick +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + STL + BLK + TRB + PF
, weights = MP, data = dat)
mxvert.5 <- lm(max_vert ~
Height*Weight +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + STL + BLK + TRB + PF
, weights = MP, data = dat)
wings <- lm(Wingspan ~
Height*Weight + Pick + MOV + SOS +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + BLK + TOV +
AST.nba + STL.nba + BLK.nba + I(ORB.nba + DRB.nba) + TOV.nba + PF.nba
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
wings.2 <- lm(Wingspan ~
Height*Weight + Pick +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + BLK + TOV +
AST.nba + STL.nba + BLK.nba + I(ORB.nba + DRB.nba) + TOV.nba + PF.nba
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
wings.3 <- lm(Wingspan ~
Height*Weight + Pick + MOV + SOS +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + BLK +TOV +
STL + TRB + PF
, weights = MP, data = dat)
wings.4 <- lm(Wingspan ~
Height*Weight + Pick +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + BLK +TOV +
STL + TRB + PF
, weights = MP, data = dat)
wings.5 <- lm(Wingspan ~
Height*Weight +
AST + I(FT/FTA) + I(X2PA/(X2PA+X3PA)) + BLK +TOV +
STL + TRB + PF
, weights = MP, data = dat)
reach <- lm(Reach ~
Height*Weight + MOV + SOS +
AST + I(X2PA/(X2PA+X3PA)) + BLK +TOV + perDNK +
AST.nba + BLK.nba + ORB.nba + DRB.nba + TOV.nba + PF.nba
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
reach.2 <- lm(Reach ~
Height*Weight +
AST + I(X2PA/(X2PA+X3PA)) + BLK +TOV + perDNK +
AST.nba + BLK.nba + ORB.nba + DRB.nba + TOV.nba + PF.nba
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
reach.3 <- lm(Reach ~
Height*Weight + Pick + MOV + SOS +
AST + I(X2PA/(X2PA+X3PA)) + BLK + TOV + PF + TRB
, weights = MP, data = dat)
reach.4 <- lm(Reach ~
Height*Weight + Pick +
AST + I(X2PA/(X2PA+X3PA)) + BLK + TOV + PF + TRB
, weights = MP, data = dat)
reach.5 <- lm(Reach ~
Height*Weight +
AST + I(X2PA/(X2PA+X3PA)) + BLK + TOV + PF + TRB
, weights = MP, data = dat)
sprnt <- lm(Sprint ~
Height*Weight + Pick +
TOV + perDNK +
AST.nba + TOV.nba + STL.nba
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
sprnt.2 <- lm(Sprint ~
Height*Weight + Pick +
FTA + I(X2PA/(X2PA+X3PA)) + AST + TOV + STL
, weights = MP, data = dat)
sprnt.3 <- lm(Sprint ~
Height*Weight +
FTA + I(X2PA/(X2PA+X3PA)) + AST + TOV + STL
, weights = MP, data = dat)
aglty <- lm(Agility ~
Height*Weight + SOS + perDNK +
I(X2PA/(X2PA+X3PA)) + STL + BLK + PF
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
aglty.2 <- lm(Agility ~
Height*Weight + perDNK +
I(X2PA/(X2PA+X3PA)) + STL + BLK + PF
, weights = ifelse(MP.nba < MP, MP.nba, MP), data = dat)
aglty.3 <- lm(Agility ~
Height*Weight + SOS +
I(X2PA/(X2PA+X3PA)) + STL + BLK + PF
, weights = MP, data = dat)
aglty.4 <- lm(Agility ~
Height*Weight +
I(X2PA/(X2PA+X3PA)) + STL + BLK + PF
, weights = MP, data = dat)
dat$atRIM[is.na(dat$atRIM)] <- predict(rim1, newdata=dat[is.na(dat$atRIM),])
dat$atRIM[is.na(dat$atRIM)] <- predict(rim2, newdata=dat[is.na(dat$atRIM),])
dat$asd[is.na(dat$asd)] <- predict(asd1, newdata=dat[is.na(dat$asd),])
dat$asd[is.na(dat$asd)] <- predict(asd2, newdata=dat[is.na(dat$asd),])
dat$NS_vert[is.na(dat$NS_vert)] <- predict(nsvert, newdata=dat[is.na(dat$NS_vert),])
dat$NS_vert[is.na(dat$NS_vert)] <- predict(nsvert.2, newdata=dat[is.na(dat$NS_vert),])
dat$NS_vert[is.na(dat$NS_vert)] <- predict(nsvert.3, newdata=dat[is.na(dat$NS_vert),])
dat$NS_vert[is.na(dat$NS_vert)] <- predict(nsvert.4, newdata=dat[is.na(dat$NS_vert),])
dat$NS_vert[is.na(dat$NS_vert)] <- predict(nsvert.5, newdata=dat[is.na(dat$NS_vert),])
dat$max_vert[is.na(dat$max_vert)] <- predict(mxvert, newdata=dat[is.na(dat$max_vert),])
dat$max_vert[is.na(dat$max_vert)] <- predict(mxvert.2, newdata=dat[is.na(dat$max_vert),])
dat$max_vert[is.na(dat$max_vert)] <- predict(mxvert.3, newdata=dat[is.na(dat$max_vert),])
dat$max_vert[is.na(dat$max_vert)] <- predict(mxvert.4, newdata=dat[is.na(dat$max_vert),])
dat$max_vert[is.na(dat$max_vert)] <- predict(mxvert.5, newdata=dat[is.na(dat$max_vert),])
dat$Wingspan[is.na(dat$Wingspan)] <- predict(wings, newdata=dat[is.na(dat$Wingspan),])
dat$Wingspan[is.na(dat$Wingspan)] <- predict(wings.2, newdata=dat[is.na(dat$Wingspan),])
dat$Wingspan[is.na(dat$Wingspan)] <- predict(wings.3, newdata=dat[is.na(dat$Wingspan),])
dat$Wingspan[is.na(dat$Wingspan)] <- predict(wings.4, newdata=dat[is.na(dat$Wingspan),])
dat$Wingspan[is.na(dat$Wingspan)] <- predict(wings.5, newdata=dat[is.na(dat$Wingspan),])
dat$Reach[is.na(dat$Reach)] <- predict(reach, newdata=dat[is.na(dat$Reach),])
dat$Reach[is.na(dat$Reach)] <- predict(reach.2, newdata=dat[is.na(dat$Reach),])
dat$Reach[is.na(dat$Reach)] <- predict(reach.3, newdata=dat[is.na(dat$Reach),])
dat$Reach[is.na(dat$Reach)] <- predict(reach.4, newdata=dat[is.na(dat$Reach),])
dat$Reach[is.na(dat$Reach)] <- predict(reach.5, newdata=dat[is.na(dat$Reach),])
dat$Sprint[is.na(dat$Sprint)] <- predict(sprnt, newdata=dat[is.na(dat$Sprint),])
dat$Sprint[is.na(dat$Sprint)] <- predict(sprnt.2, newdata=dat[is.na(dat$Sprint),])
dat$Sprint[is.na(dat$Sprint)] <- predict(sprnt.3, newdata=dat[is.na(dat$Sprint),])
dat$Agility[is.na(dat$Agility)] <- predict(aglty, newdata=dat[is.na(dat$Agility),])
dat$Agility[is.na(dat$Agility)] <- predict(aglty.2, newdata=dat[is.na(dat$Agility),])
dat$Agility[is.na(dat$Agility)] <- predict(aglty.3, newdata=dat[is.na(dat$Agility),])
dat$Agility[is.na(dat$Agility)] <- predict(aglty.4, newdata=dat[is.na(dat$Agility),])
#### pos finder
pos <- aggregate(. ~ Name, data = pos[-2], mean)
pos$Pos <- as.factor(round(pos$Pos, 0))
dat <- merge(dat, pos, by = "Name", all.x =T)
pos.set <- subset(dat, !is.na(Pos))[c(1, 4:10, 12:18, 21:30, 34, 66)]
pos.set.2 <- na.omit(pos.set)
library(nnet)
pos.mdl <- multinom(Pos ~ X2PA + X3PA + FT + FTA + TRB + AST + TOV + STL + BLK + PF + PTS +
Height + Weight + NS_vert + max_vert + Reach + Wingspan + Agility + Age + atRIM + asd
, data=dat, weights = MP)
POS <- data.frame("PRB" = predict(pos.mdl, newdata=dat, "probs"))
colnames(POS) <- c("PG", "SG", "SF", "PF", "C")
POS <- na.omit(cbind("Name"=dat$Name, POS))
POS <- aggregate(. ~ Name, data = POS, mean)
for(i in 1:nrow(POS)){
POS$Pos[i] <- round(POS$PG[i] + POS$SG[i]*2 + POS$SF[i]*3 + POS$PF[i]*4 + POS$C[i]*5, 2)
}
POS <- POS[-c(2:6)]
#####################################
SHOTLOC <- dat[c(1:4, 30, 34)]
ATH <- dat[c(1, 4, 23:28)]
ATH <- na.omit(ATH)
MPfinder <- ATH[1:2]
MPfinder <- aggregate( . ~ Name, data = MPfinder, sum)
colnames(MPfinder)[2] <- "mpdst"
ATH <- merge(ATH, MPfinder, by = "Name", all.x=T)
for(j in 3:8){
ATH[,j] <- ATH[,j]*(ATH$MP/ATH$mpdst)
}
ATH <- aggregate( . ~ Name, data = ATH, sum)
ATH <- ATH[-c(2,9)]
write.csv(SHOTLOC, "data/SHOTLOC.csv", row.names=FALSE)
write.csv(ATH, "data/ATH.csv", row.names=FALSE)
write.csv(POS, "data/POS.csv", row.names=FALSE)
rm(list=ls())
setwd("C:/Users/Layne/Dropbox/bball")
##
###### EWP MODELS
##i
load("data/ncaa_indi")
load("data/euro")
load("data/eu.inf")
ac <- read.csv("data/agecurve.csv")
ac.lws <- loess(ac$Curve.cen ~ ac$Age, span = 1)
#
### NCAA
ATH <- read.csv("data/ATH.csv")
SHOTLOC <- read.csv("data/SHOTLOC.csv")[-4]
POS <- read.csv("data/POS.csv")
ncaa <- ncaa[-c(36, 40, 42:43, 46:53)]
ncaa <- merge(ncaa, SHOTLOC, by = c("Name", "Season", "Tm"), all.x =T)
ncaa <- merge(ncaa, ATH, by = c("Name"), all.x =T)
ncaa <- merge(ncaa, POS, by = "Name", all.x = T)
ncaa$OBS[ncaa$OBS < 0] <- 0
m1 <-     glm(OBS ~
I(predict(ac.lws, newdata= Age)) + I(MP/G) + SOS*MOV + EXP +
tmPTS + X2P + X3P + FT + X2PA*atRIM + X3PA +
I((tmX2PA - X2PA)/((tmX3PA - X3PA) + (tmX2PA - X2PA))) +
AST*TOV + asd +
TRB + tmTRB +
STL + BLK + I(tmSTL - STL) + I(tmBLK - BLK) +
tmPF +
Height + NS_vert + Sprint,
weights = MP, data = ncaa, family = quasipoisson)
fit <- data.frame("EWP" = as.data.frame(predict(m1, newdata = ncaa, type = "response", se.fit = TRUE))$fit)
ncaa.ewp <- data.frame("Name" = ncaa$Name, "League" = "NCAA", "Team" = ncaa$Tm, "Season" = ncaa$Season, "MP" = ncaa$MP, "OBS" = ncaa$OBS, fit)
ncaa.ewp <- subset(ncaa.ewp, !is.na(EWP))
#	compz <- ncaa.ewp[order(ncaa.ewp$Season, decreasing = T), ]
#	compz <- subset(compz, !duplicated(Name))
#	for(i in 1:nrow(ncaa.ewp)){
#		compset <- c(ncaa.ewp$EWP[i], compz$EWP[compz$Name != ncaa.ewp$Name[i]])
#			obs <- na.omit(compz$OBS)
#		ncaa.ewp$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
#	}
#ncaa.ewp$EWP <- ncaa.ewp$adj
#ncaa.ewp <- ncaa.ewp[-ncol(ncaa.ewp)]
#
### EURO
#prep
obs.imp <- ncaa.ewp[order(ncaa.ewp$Season, decreasing = TRUE),]
obs.imp <- subset(obs.imp, !duplicated(Name))[c(1,7)]
euro$Name <- as.character(euro$Name)
obs.imp$Name <- as.character(obs.imp$Name)
euro <- merge(euro, obs.imp, by = "Name", all.x=T)
euro$OBS[is.na(euro$OBS)] <- euro$EWP[is.na(euro$OBS)]
euro <- euro[-ncol(euro)]
euro <- euro[-c(34, 36, 39:46)]
euro <- merge(euro, subset(SHOTLOC, is.na(Tm)), by = c("Name", "Season"), all.x =T)
euro <- merge(euro, ATH, by = c("Name"), all.x =T)
euro <- merge(euro, POS, by = "Name", all.x = T)
#run
euro$OBS[euro$OBS < 0] <- 0
for(i in 1:nrow(euro)){
euro$CBA[i] <- ifelse(eu.inf$League[eu.inf$Name == euro$Name[i] & eu.inf$Season == euro$Season[i]] == "CBA", 1, 0)
}
m2 <- glm(OBS ~
I(predict(ac.lws, newdata= Age)) +
PTS_tm + X2P + X3P + FT + X2PA*atRIM + X3PA + I((X2PA_tm - X2PA)/((X3PA_tm - X3PA) + (X2PA_tm - X2PA))) +
AST*TOV + asd*I(X2PA + X3PA) +
DRB + I((ORB_tm + DRB_tm) - (ORB + DRB)) +
STL + BLK + I(STL_tm - STL) +
PF + I(PF_tm - PF) +
Height + NS_vert + CBA,
weights = ifelse(Age <= 22, MP*5, MP), data = euro, family = quasipoisson)
fit <- data.frame("EWP" = as.data.frame(predict(m2, newdata = euro, type = "response", se.fit = TRUE))$fit)
euro.ewp <- data.frame("Name" = euro$Name, "League" = NA, "Team" = NA, "Season" = euro$Season, "MP" = euro$MP, "OBS" = euro$OBS, fit)
euro.ewp <- subset(euro.ewp, !is.na(EWP))
euro.ewp$Name <- as.character(euro.ewp$Name)
eu.inf$Name <- as.character(eu.inf$Name)
eu.inf$Team <- as.character(eu.inf$Team)
for(i in 1:nrow(euro.ewp)){
lgs <- unique(eu.inf$League[eu.inf$Name == euro.ewp$Name[i] & eu.inf$Season == euro.ewp$Season[i]])
tms <- unique(eu.inf$Team[eu.inf$Name == euro.ewp$Name[i] & eu.inf$Season == euro.ewp$Season[i]])
#leagues
if(length(lgs) == 3){
euro.ewp$League[i] <- paste(lgs[1], lgs[2], lgs[3], sep = "/")
}else if(length(lgs) == 2){
euro.ewp$League[i] <- paste(lgs[1], lgs[2], sep = "/")
}else{
euro.ewp$League[i] <- as.character(lgs[1])
}
#teams
if(length(tms) == 3){
euro.ewp$Team[i] <- paste(tms[1], tms[2], tms[3], sep = "/")
}else if(length(tms) == 2){
euro.ewp$Team[i] <- paste(tms[1], tms[2], sep = "/")
}else{
euro.ewp$Team[i] <- as.character(tms[1])
}
}
### Combine and organize NCAA and Euro
ewp <- rbind(ncaa.ewp, euro.ewp)
ewp <- ewp[order(ewp$Season, decreasing = T), ]
###########
##############
##########
#
## Humble model
#
# Scale
#draft order...
drft <- read.csv("data/Drafts.csv", strip.white=T)
PICK <- merge(ewp, drft, by="Name", all.x=TRUE)
PICK <- subset(PICK, !is.na(Pick))
lws.pick <- loess(PICK$OBS ~ PICK$Pick, span=0.85)
save(lws.pick, file = "lws.pick")
####	Prep random forest data
hum.ncaa <- merge(ncaa.ewp, ncaa, by = c("Name", "Season", "MP", "OBS"), all.x = T)
hum.ncaa <- merge(hum.ncaa, drft, by = "Name", all.x = T)
hum.ncaa$Pick <- predict(lws.pick, newdata=hum.ncaa$Pick)
hum.ncaa <- subset(hum.ncaa, DRFT >= 1990)
hum.ncaa$Pick[is.na(hum.ncaa$Pick)] <- min(hum.ncaa$Pick, na.rm=T)
hum.euro <- merge(euro.ewp, euro, by = c("Name", "Season", "MP", "OBS"), all.x = T)
hum.euro <- merge(hum.euro, drft, by = "Name", all.x = T)
hum.euro$Pick <- predict(lws.pick, newdata=hum.euro$Pick)
hum.euro <- subset(hum.euro, DRFT >= 1990)
hum.euro$Pick[is.na(hum.euro$Pick)] <- min(hum.euro$Pick, na.rm=T)
hum.euro$Tm <- hum.euro$Team
#####
library(randomForest)
case.ncaa <- data.frame("Name" = hum.ncaa$Name, "League" = "NCAA", "Tm" = hum.ncaa$Tm, "Season" = hum.ncaa$Season)
case.euro <- data.frame("Name" = hum.euro$Name, "League" = hum.euro$League, "Tm" = hum.euro$Team, "Season" = hum.euro$Season)
for(i in 1990:2015){
m1 <- randomForest(OBS ~
Pick + Age + EXP + EWP + SOS + MOV +
X2P + X3P + FT + X2PA + X3PA + FTA + asd + atRIM +
AST + TOV +
TRB +
STL + BLK + PF +
Height + NS_vert + Sprint,
data = subset(hum.ncaa, Season != i), weights = MP, importance=TRUE, na.action=na.omit)
case.ncaa$PRD[hum.ncaa$Season == i] <- predict(m1, subset(hum.ncaa, Season == i))
}
ncaa.hum <- data.frame("Name" = case.ncaa$Name, "League" = case.ncaa$League, "Team" = case.ncaa$Tm, "Season" = case.ncaa$Season, "HUM" = round(case.ncaa$PRD, 1))
ncaa.hum <- subset(ncaa.hum, !is.na(HUM))
#	for(i in 1:nrow(ncaa.hum)){
#		compset <- c(ncaa.hum$HUM[i], ncaa.hum$HUM[ncaa.hum$Name != ncaa.hum$Name[i]])
#			obs <- na.omit(ncaa.ewp$OBS)
#		ncaa.hum$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
#	}
#ncaa.hum$HUM <- ncaa.hum$adj
#ncaa.hum <- ncaa.hum[-ncol(ncaa.hum)]
#
for(i in 1990:2015){
m1 <- randomForest(OBS ~
Pick + Age + EWP +
X2P + X3P + FT + X2PA + X3PA + FTA + asd + atRIM +
AST + TOV +
DRB + ORB +
STL + BLK + PF +
Height + NS_vert + CBA,
data = subset(hum.euro, Season != i), weights = ifelse(Age <= 22, MP*5, MP), importance=TRUE, na.action=na.omit)
case.euro$PRD[hum.euro$Season == i] <- predict(m1, subset(hum.euro, Season == i))
}
euro.hum <- data.frame("Name" = case.euro$Name, "League" = case.euro$League, "Team" = case.euro$Tm, "Season" = case.euro$Season, "HUM" = round(case.euro$PRD, 1))
euro.hum <- subset(euro.hum, !is.na(HUM))
#	for(i in 1:nrow(euro.hum)){
#		compset <- c(euro.hum$HUM[i], euro.hum$HUM[euro.hum$Name != euro.hum$Name[i]])
#			obs <- na.omit(euro.ewp$OBS)
#		euro.hum$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
#	}
#euro.hum$HUM <- euro.hum$adj
#euro.hum <- euro.hum[-ncol(euro.hum)]
### Combine all finished sections
hum <- rbind(ncaa.hum, euro.hum)
data <- merge(ewp, hum, by = c("Name", "League", "Team", "Season"), all.x = T)
data <- data[order(data$Season, decreasing = T), ]
#######
#########  STAR MOD!!!
######
star.ncaa <- ncaa
colnames(star.ncaa)[4] <- "League"
star.ncaa$PRB <- NA
star.ncaa$PRB <- ifelse(!is.na(star.ncaa$OBS) & star.ncaa$OBS >= 2.5, 1, 0)
star.ncaa$PRB <- ifelse(!is.na(star.ncaa$OBS) & star.ncaa$OBS >= 5, 2, star.ncaa$PRB)
star.ncaa$PRB <- ifelse(!is.na(star.ncaa$OBS) & star.ncaa$OBS >= 7.5, 3, star.ncaa$PRB)
star.ncaa$PRB <- ifelse(!is.na(star.ncaa$OBS) & star.ncaa$OBS >= 10, 4, star.ncaa$PRB)
star.euro <- merge(data, euro.hum, by = c("Name", "Season", "League", "Team", "HUM"), all.x = T)
star.euro <- subset(star.euro, League != "NCAA")
star.euro$PRB <- NA
star.euro$PRB <- ifelse(!is.na(star.euro$OBS) & star.euro$OBS >= 2.5, 1, 0)
star.euro$PRB <- ifelse(!is.na(star.euro$OBS) & star.euro$OBS >= 5, 2, star.euro$PRB)
star.euro$PRB <- ifelse(!is.na(star.euro$OBS) & star.euro$OBS >= 7.5, 3, star.euro$PRB)
star.euro$PRB <- ifelse(!is.na(star.euro$OBS) & star.euro$OBS >= 10, 4, star.euro$PRB)
library(nnet)
prb.ncaa <- multinom(PRB ~
I(predict(ac.lws, newdata= Age)) + I(MP/G) + SOS + MOV +
X2P + X3P + FT + X2PA*atRIM + X3PA +
I((tmX2PA - X2PA)/((tmX3PA - X3PA))) +
AST*TOV + asd +
TRB + STL + BLK + I(tmSTL - STL) + I(tmBLK - BLK) +
tmPF + Height + NS_vert,
data=star.ncaa, weights = MP)
prb.euro <- multinom(PRB ~
EWP + HUM,
data=star.euro, weights =  MP)
PRB.ncaa <- data.frame("PRB" = round(predict(prb.ncaa, newdata=star.ncaa, "probs"), digits=3))
colnames(PRB.ncaa) <- c("BUST", "BNCH", "STRT", "STUD", "STAR")
star.ncaa <- cbind(star.ncaa, PRB.ncaa)
star.ncaa <- merge(data, star.ncaa[c(1:2, 4, 53:57)], by = c("Name", "Season", "League"))
PRB.euro <- data.frame("PRB" = round(predict(prb.euro, newdata=star.euro, "probs"), digits=3))
colnames(PRB.euro) <- c("BUST", "BNCH", "STRT", "STUD", "STAR")
star.euro <- cbind(star.euro, PRB.euro)
star.euro <- star.euro[c(1:4, 6:8, 5, 10:14)]
star.euro$MP <- round(star.euro$MP, 0)
data <- rbind(star.ncaa, star.euro)
#	data <- rbind(star.ncaa[c(1:8, (ncol(star.ncaa)-4):ncol(star.ncaa))], star.euro[c(1:8, (ncol(star.euro)-4):ncol(star.euro))])
#	data <- merge(data, star[c(1:8, 38:42)], by = c("Name", "Season", "League", "Team", "MP", "OBS", "EWP", "HUM"), all.x = T)
##########
##	Plug into draft history
#######
### plug retrodictions into drafted list
draft <- read.csv("data/Drafts.csv")
draft <- subset(draft, DRFT >= 1990)
draft$Name <- as.character(draft$Name)
#	percent <- function(x, digits = 0, format = "f", ...) {
#		 paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
#	}
for(i in 1:nrow(draft)){
ego <- subset(data, Name == draft$Name[i] & Season <= draft$DRFT[i])
draft$League[i] <- as.character(ego$League[1])
draft$Team[i] <- as.character(ego$Team[1])
draft$MP[i] <- round(sum(ego$MP, na.rm = T), 0)
draft$EWP[i] <- round(weighted.mean(ego$EWP, ego$MP, na.rm = T), 1)
draft$HUM[i] <- round(weighted.mean(ego$HUM, ego$MP, na.rm = T), 1)
draft$BUST[i] <- round(weighted.mean(ego$BUST, ego$MP, na.rm = T), 2)
draft$BNCH[i] <- round(weighted.mean(ego$BNCH, ego$MP, na.rm = T), 2)
draft$STRT[i] <- round(weighted.mean(ego$STRT, ego$MP, na.rm = T), 2)
draft$STUD[i] <- round(weighted.mean(ego$STUD, ego$MP, na.rm = T), 2)
draft$STAR[i] <- round(weighted.mean(ego$STAR, ego$MP, na.rm = T), 2)
}
colnames(draft)[3] <- "Season"
#add seniors!!!
snrs <- subset(ncaa, Season == 2015 & EXP > 3)[1:2]
for(i in 1:nrow(snrs)){
ego <- subset(data, Name == snrs$Name[i] & Season <= snrs$Season[i])
snrs$League[i] <- as.character(ego$League[1])
snrs$Team[i] <- as.character(ego$Team[1])
snrs$MP[i] <- round(sum(ego$MP, na.rm = T), 0)
snrs$EWP[i] <- round(weighted.mean(ego$EWP, ego$MP, na.rm = T), 1)
snrs$HUM[i] <- round(weighted.mean(ego$HUM, ego$MP, na.rm = T), 1)
snrs$BUST[i] <- round(weighted.mean(ego$BUST, ego$MP, na.rm = T), 2)
snrs$BNCH[i] <- round(weighted.mean(ego$BNCH, ego$MP, na.rm = T), 2)
snrs$STRT[i] <- round(weighted.mean(ego$STRT, ego$MP, na.rm = T), 2)
snrs$STUD[i] <- round(weighted.mean(ego$STUD, ego$MP, na.rm = T), 2)
snrs$STAR[i] <- round(weighted.mean(ego$STAR, ego$MP, na.rm = T), 2)
}
snrs <- data.frame("Pick" = "", snrs)
draft <- rbind(draft, snrs)
draft <- subset(draft, !duplicated(Name))
draft[draft == "NaN"] <- NA
#		draft$BUST[!is.na(draft$BUST)] <- percent(draft$BUST[!is.na(draft$BUST)])
#		draft$BNCH[!is.na(draft$BNCH)] <- percent(draft$BNCH[!is.na(draft$BNCH)])
#		draft$STRT[!is.na(draft$STRT)] <- percent(draft$STRT[!is.na(draft$STRT)])
#		draft$STUD[!is.na(draft$STUD)] <- percent(draft$STUD[!is.na(draft$STUD)])
#		draft$STAR[!is.na(draft$STAR)] <- percent(draft$STAR[!is.na(draft$STAR)])
draft <- data.frame(draft[1:8], "AVG" = round(ifelse(!is.na(draft$HUM), (draft$HUM + draft$EWP)/2, draft$EWP), 1), draft[9:13])
draft <- merge(draft, POS, by = "Name", all.x = T)
draft <- draft[order(draft$AVG, decreasing = T),]
draft <- draft[order(draft$Season, decreasing = T),]
#########
### OUTPUT ####
#########
data$MP <- round(data$MP, 0)
data$OBS <- round(data$OBS, 1)
#	data$BUST[!is.na(data$BUST)] <- percent(round(as.numeric(data$BUST[!is.na(data$BUST)]), 2))
#	data$BNCH[!is.na(data$BNCH)] <- percent(round(as.numeric(data$BNCH[!is.na(data$BNCH)]), 2))
#	data$STRT[!is.na(data$STRT)] <- percent(round(as.numeric(data$STRT[!is.na(data$STRT)]), 2))
#	data$STUD[!is.na(data$STUD)] <- percent(round(as.numeric(data$STUD[!is.na(data$STUD)]), 2))
#	data$STAR[!is.na(data$STAR)] <- percent(round(as.numeric(data$STAR[!is.na(data$STAR)]), 2))
#data <- merge(data, POS, by = "Name", all.x = T)
write.csv(data, "~/GitHub/bball/shiny/preds/data/OUTPUT.FULL.csv", row.names = FALSE)
write.csv(draft, "~/GitHub/bball/shiny/preds/data/OUTPUT.DRAFT.csv", row.names = FALSE)
setwd("~/GitHub/bball/shiny")
library(shiny)
runApp("preds")
runApp("comps")
