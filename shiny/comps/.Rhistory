#### NCAA TEAM ###########
##########################
tm <- read.csv("data/draftmod/NCAA_team.csv", strip.white = T)
tm <- subset(tm, Season >= 1990)
tm15 <- read.csv("data/draftmod/ncaa.tm_2015upd.csv", strip.white=T)
tm <- rbind(tm, tm15)
# Minutes
tm$MP[is.na(tm$MP)] <- tm$G[is.na(tm$MP)]*200
# Rebounding
tm$ORB[is.na(tm$ORB)] <- tm$TRB[is.na(tm$ORB)] - tm$DRB[is.na(tm$ORB)]
tm$DRB[is.na(tm$DRB)] <- tm$TRB[is.na(tm$DRB)] - tm$ORB[is.na(tm$DRB)]
tm$TRB[is.na(tm$TRB)] <- tm$ORB[is.na(tm$TRB)] + tm$DRB[is.na(tm$TRB)]
# Scoring
tm$FG[is.na(tm$FG)] <- tm$X2P[is.na(tm$FG)] + tm$X3P[is.na(tm$FG)]
tm$FGA[is.na(tm$FGA)] <- tm$X2PA[is.na(tm$FGA)] + tm$X3PA[is.na(tm$FGA)]
tm$X2P[is.na(tm$X2P)] <- tm$FG[is.na(tm$X2P)] - tm$X3P[is.na(tm$X2P)]
tm$X2PA[is.na(tm$X2PA)] <- tm$FGA[is.na(tm$X2PA)] - tm$X3PA[is.na(tm$X2PA)]
tm$X3P[is.na(tm$X3P)] <- tm$FG[is.na(tm$X3P)] - tm$X2P[is.na(tm$X3P)]
tm$X3PA[is.na(tm$X3PA)] <- tm$FGA[is.na(tm$X3PA)] - tm$X2PA[is.na(tm$X3PA)]
tm$PTS[is.na(tm$PTS)] <- tm$FT[is.na(tm$PTS)] + tm$X2P[is.na(tm$PTS)]*2 + tm$X3P[is.na(tm$PTS)]*3
# Pace
tm$PACE <- ((tm$FGA + 0.475*tm$FTA + tm$TOV - tm$ORB) / tm$MP)*5
# Impute Pace
for(i in 1:nrow(tm)){
tm$PACE[i] <- ifelse(is.na(tm$PACE[i]),
weighted.mean(tm$PACE[tm$Coach == tm$Coach[i]], 1/abs(tm$Season[i] - tm$Season[tm$Coach == tm$Coach[i]]), na.rm=T),
tm$PACE[i])
}
for(i in 1:nrow(tm)){
tm$PACE[i] <- ifelse(is.na(tm$PACE[i]),
mean(tm$PACE[tm$Season == tm$Season[i]], na.rm=T),
tm$PACE[i])
}
# per100poss
tm$POSS <- tm$MP*tm$PACE/5
for(i in 18:34){
tm[,i] <- round((tm[,i]/tm$POSS)*100, 1)
}
# impute empties
for(j in 18:34){
tm[is.na(tm[,j]), j] <- mean(tm[ ,j], na.rm=T)
}
# Save
tm <- data.frame('Tm' = tm$Tm, 'Season' = tm$Season, 'tmX2P' = tm$X2P, 'tmX2PA' = tm$X2PA, 'tmX3P' = tm$X3P, 'tmX3PA' = tm$X3PA, 'tmFT' = tm$FT, 'tmFTA' = tm$FTA, 'tmORB' = tm$ORB, 'tmTRB' = tm$TRB, 'tmAST' = tm$AST, 'tmTOV' = tm$TOV, 'tmSTL' = tm$STL, 'tmBLK' = tm$BLK, 'tmPF' = tm$PF, 'tmPTS' = tm$PTS, 'PACE' = tm$PACE, 'MOV' = tm$SRS - tm$SOS, 'SOS' = tm$SOS, 'Coach' = tm$Coach)
save(tm, file = "data/draftmod/ncaa_tm")
##########################
#### NCAA INDI ###########
##########################
# Read in data
ncaa <- read.csv("data/draftmod/NCAA_indi.csv", strip.white = T)
ncaa <- subset(ncaa, Season >= 1990)
ncaa15 <- read.csv("data/draftmod/ncaa.ind_2015upd.csv", strip.white = T)
ncaa$Name <- as.character(ncaa$Name)
ncaa15$Name <- as.character(ncaa15$Name)
for(i in 1:nrow(ncaa15)){
ncaa15$EXP[i] <- ifelse(length(ncaa$EXP[ncaa$Name == ncaa15$Name[i]]) > 0, max(ncaa$EXP[ncaa$Name == ncaa15$Name[i]], na.rm=T) + 1, 1)
}
ncaa <- rbind(ncaa, ncaa15)
load("data/draftmod/nba")
load("data/draftmod/ncaa_tm")
####  combine
ncaa <- merge(ncaa, tm, by = c('Tm', 'Season'), all.x = T)
ncaa <- merge(ncaa, nba, by = c('Name'), all.x = T)
# per100poss
ncaa$POSS <- ncaa$MP*ncaa$PACE
for(i in 7:20){
ncaa[,i] <- round((ncaa[,i]/ncaa$POSS)*100, 1)
}
ncaa$X2P[is.na(ncaa$X2P)] <- 0
ncaa$X2PA[is.na(ncaa$X2PA)] <- 0
ncaa$X3P[is.na(ncaa$X3P)] <- 0
ncaa$X3PA[is.na(ncaa$X3PA)] <- 0
###
bio <- read.csv("data/draftmod/BBRbio.csv", strip.white = T)
ncaa <- merge(ncaa, bio, by = "Name", all.x=T)
ncaa$Age <- ((ncaa$Season - 1900)*365 - ncaa$DOB)/365
######  Save out
save(ncaa, file = "data/draftmod/ncaa_indi")
###################################
#### EURO INDI AND TEAM ###########
###################################
###
###### Arrange euro data then combine with WS/RAPM and other details.
###
# ARRANGE EURO DATA
euro <- read.csv("data/draftmod/INTL_indi.csv", strip.white = T)
euro15 <- read.csv("data/draftmod/euro.ind_2015upd.csv", strip.white = T)
euro <- rbind(euro, euro15)
tm <- read.csv("data/draftmod/INTL_team.csv")
tm15 <- read.csv("data/draftmod/euro.tm_2015upd.csv", strip.white = T)
tm <- rbind(tm, tm15)
euro <- subset(euro, League != "FIBAEU22")
# append team data to individuals
euro <- merge(euro, tm, by = c("Season", "League", "Team"), all.x=T)
## impute ORBs for NAs and tranform TRB into DRB
ORB.prj <- mean(euro$ORB[euro$MP > 200]/euro$TRB[euro$MP > 200], na.rm=T)
euro$ORB[is.na(euro$ORB) & !is.na(euro$TRB)] <- euro$TRB[is.na(euro$ORB) & !is.na(euro$TRB)]*ORB.prj
euro$ORB_tm[is.na(euro$ORB_tm) & !is.na(euro$TRB_tm)] <- euro$TRB_tm[is.na(euro$ORB_tm) & !is.na(euro$TRB_tm)]*ORB.prj
euro$TRB <- euro$TRB - euro$ORB
euro$TRB_tm <- euro$TRB_tm - euro$ORB_tm
colnames(euro)[16] <- "DRB"
colnames(euro)[32] <- "DRB_tm"
# Impute missing pace
euro$Pace[is.na(euro$Pace)] <- mean(tm$Pace, na.rm=T)
# Convert to per100poss
euro$MP_tm[is.na(euro$MP_tm)] <- euro$G_tm[is.na(euro$MP_tm)]*40*5
for(i in 25:38){
Poss <- (euro$MP_tm * euro$Pace)/5
euro[,i] <- ifelse(!is.na(euro[,i]), round((euro[,i]/Poss)*100, 1), NA)
}
### INDIVIDUAL STAS per100
for(i in 9:22){
Poss <- euro$MP * euro$Pace
euro[,i] <- (euro[,i]/Poss)*100
}
######  Standardize to EL
lgs <- c("ACB", "GREEK", "ADRIATIC", "EUROCUP", "FRENCH", "ITALIAN", "FIBAEU")
eu.adj <- as.data.frame(matrix(nrow = length(lgs), ncol = 16))
colnames(eu.adj) <- c("N", "MPG", "X2P", "X2PA", "X3P", "X3PA", "FT", "FTA", "ORB", "DRB", "AST", "TOV", "STL", "BLK", "PF", "PTS")
rownames(eu.adj) <- lgs
put <- 1
for(i in lgs){
LG <- subset(euro, League == i)
EL <- subset(euro, League == "EURO")
cmb <- merge(LG, EL, by = c("Name", "Season"))
eu.adj[put,1] <- nrow(cmb)
for(j in 8:22){
cmb2 <- subset(cmb, cmb[,j] > 0 & cmb[,j+37] >0)
eu.adj[put,(j-6)] <- weighted.mean(cmb2[, j+37], ifelse(cmb2$MP.x > cmb2$MP.y, cmb2$MP.y, cmb2$MP.x), na.rm=T)/weighted.mean(cmb2[, j], ifelse(cmb2$MP.x > cmb2$MP.y, cmb2$MP.y, cmb2$MP.x), na.rm=T)
}
put <- put + 1
}
##  Applying within Euro translation to seniors
put <- 1
for(i in lgs){
for(j in 2:ncol(eu.adj)){
euro[euro$League == i, j+6] <-  euro[euro$League == i, j+6]*eu.adj[put, j]
}
for(j in 3:ncol(eu.adj)){
euro[euro$League == i, j+22] <-  euro[euro$League == i, j+22]*eu.adj[put, j]
}
put <- put + 1
}
# Global seniors adjustment
lgs <- c("OLYMP", "WC", "FIBAMER")
gl.adj <- as.data.frame(matrix(nrow = length(lgs), ncol = 16))
colnames(gl.adj) <- c("N", "MPG", "X2P", "X2PA", "X3P", "X3PA", "FT", "FTA", "ORB", "DRB", "AST", "TOV", "STL", "BLK", "PF", "PTS")
rownames(gl.adj) <- lgs
put <- 1
for(i in lgs){
LG <- subset(euro, League == i)
EL <- subset(euro, (League == "EURO" | League == "EUROCUP" | League == "ACB" | League == "FRENCH" | League == "GREEK" | League == "ITALIAN" | League == "ADRIATIC" | League == "FIBAEU"))
cmb <- merge(LG, EL, by = c("Name", "Season"))
gl.adj[put,1] <- nrow(cmb)
for(j in 8:22){
cmb2 <- subset(cmb, cmb[,j] > 0 & cmb[,j+37] >0)
gl.adj[put,(j-6)] <- weighted.mean(cmb2[, j+37], ifelse(cmb2$MP.x > cmb2$MP.y, cmb2$MP.y, cmb2$MP.x), na.rm=T)/weighted.mean(cmb2[, j], ifelse(cmb2$MP.x > cmb2$MP.y, cmb2$MP.y, cmb2$MP.x), na.rm=T)
}
put <- put + 1
}
##  Applying within Global translation
put <- 1
for(i in lgs){
for(j in 2:ncol(gl.adj)){
euro[euro$League == i, j+6] <-  euro[euro$League == i, j+6]*gl.adj[put, j]
}
for(j in 3:ncol(gl.adj)){
euro[euro$League == i, j+22] <-  euro[euro$League == i, j+22]*gl.adj[put, j]
}
put <- put + 1
}
## finding age-group translations
lgs <- c("FIBAEU18", "FIBAEU20", "WC19")
dv.adj <- as.data.frame(matrix(nrow = length(lgs), ncol = 16))
colnames(dv.adj) <- c("N", "MPG", "X2P", "X2PA", "X3P", "X3PA", "FT", "FTA", "ORB", "DRB", "AST", "TOV", "STL", "BLK", "PF", "PTS")
rownames(dv.adj) <- lgs
put <- 1
for(i in lgs){
LG <- subset(euro, League == i)
EL <- subset(euro, League != "FIBAEU18" & League != "FIBAEU20" & League != "WC19")
cmb <- merge(LG, EL, by = c("Name", "Season"))
dv.adj[put,1] <- nrow(cmb)
for(j in 8:22){
cmb2 <- subset(cmb, cmb[,j] > 0 & cmb[,j+37] >0)
dv.adj[put,(j-6)] <- weighted.mean(cmb2[, j+37], ifelse(cmb2$MP.x > cmb2$MP.y, cmb2$MP.y, cmb2$MP.x), na.rm=T)/weighted.mean(cmb2[, j], ifelse(cmb2$MP.x > cmb2$MP.y, cmb2$MP.y, cmb2$MP.x), na.rm=T)
}
put <- put + 1
}
##  Applying within age-groups translation to seniors
put <- 1
for(i in lgs){
for(j in 2:ncol(dv.adj)){
euro[euro$League == i, j+6] <-  euro[euro$League == i, j+6]*dv.adj[put, j]
}
for(j in 3:ncol(dv.adj)){
euro[euro$League == i, j+22] <-  euro[euro$League == i, j+22]*dv.adj[put, j]
}
put <- put + 1
}
####
# Impute mean values for those without team data (or with prior adjustments)
for(i in 25:38){
euro[,i] <- ifelse(!is.na(euro[,i]), euro[,i], mean(euro[,i], na.rm=T))
}
### impute blks and PFs
for(i in 1:nrow(euro)){
euro$BLK[i] <- ifelse(is.na(euro$BLK[i]), weighted.mean(euro$BLK[euro$Name == euro$Name[i]], euro$MP[euro$Name == euro$Name[i]], na.rm=T), euro$BLK[i])
euro$PF[i] <- ifelse(is.na(euro$PF[i]), weighted.mean(euro$PF[euro$Name == euro$Name[i]], euro$MP[euro$Name == euro$Name[i]], na.rm=T), euro$PF[i])
}
###
euro <- euro[-c(23:24)]
# Merge within seasons...
library(plyr)
eu.inf <- euro[c(1:4)]
eu.sum <- euro[-c(2:3, 5, 8:39)]
eu.mean <- euro[-c(2:3, 5:6)]
sum.hld <- aggregate( . ~ Name + Season, data = eu.sum, sum)
mn.hld <- ddply(eu.mean, .(Name, Season), function(df) {
numcolwise(weighted.mean)(df, na.rm = T, w=df$MP)
})
mn.hld <- mn.hld[-3]
euro <- merge(sum.hld, mn.hld, by = c("Name", "Season"))
####
####  Add in other information!
nba$OBS[nba$Name == "Arvydas Sabonis"] <- 11.14
nba2 <- nba[-2]
euro <- merge(euro, nba2, by = "Name", all.x=T)
####
bio <- read.csv("data/draftmod/BBRbio.csv", strip.white = T)
euro <- merge(euro, bio, by="Name", all.x=T)
euro$Age <- ((euro$Season-1900)*365 - euro$DOB)/365
save(euro, file = "data/draftmod/euro")
save(eu.inf, file = "data/draftmod/eu.inf")
rm(list=ls())
setwd("~/GitHub/bball")
###########
######## Position finder
##
nba <- read.csv("data/draftmod/BBRtot.csv")
nba <- data.frame("Name" = nba$Name, "Pos" = nba$Pos)
nba <- na.omit(nba)
nba <- aggregate( . ~ Name, data = nba, mean)
nba$Pos <- round(nba$Pos, 0)
load("data/draftmod/ncaa_indi")
ncaa <- data.frame("Name"=ncaa$Name, "Season"=ncaa$Season, "MP"=ncaa$MP, "Height"=ncaa$Height, "Weight"=ncaa$Weight, "X2PA"=ncaa$X2PA, "X3PA"=ncaa$X3PA, "FTA"=ncaa$FTA, "AST"=ncaa$AST, "TOV"=ncaa$TOV, "TRB"=ncaa$TRB, "STL"=ncaa$STL, "BLK"=ncaa$BLK, "FL"=ncaa$PF)
load("data/draftmod/euro")
euro <- data.frame("Name"=euro$Name, "Season"=euro$Season, "MP"=euro$MP, "Height"=euro$Height, "Weight"=euro$Weight, "X2PA"=euro$X2PA, "X3PA"=euro$X3PA, "FTA"=euro$FTA, "AST"=euro$AST, "TOV"=euro$TOV, "TRB"=euro$ORB+euro$DRB, "STL"=euro$STL, "BLK"=euro$BLK, "FL"=euro$PF)
pos <- rbind(ncaa, euro)
pos <- merge(pos, nba, by = "Name", all.x = T)
pos$Pos <- as.factor(pos$Pos)
library(nnet)
pos.mdl <- multinom(Pos ~
Height + Weight +
I(X2PA + X3PA) + I(X2PA/(X2PA + X3PA)) + FTA +
AST +
TRB +
BLK + STL + FL
, data=pos, weights = MP)
summary(pos.mdl)
POS <- data.frame("PRB" = round(predict(pos.mdl, newdata=pos, "probs"), digits=2))
colnames(POS) <- c("PG", "SG", "SF", "PF", "C")
POS <- cbind(pos[,1:2], POS)
POS <- POS[order(POS$Season, decreasing = T), ]
POS <- na.omit(subset(POS, !duplicated(Name)))
for(i in 1:nrow(POS)){
POS$Pos[i] <- POS$PG[i] + POS$SG[i]*2 + POS$SF[i]*3 + POS$PF[i]*4 + POS$C[i]*5
}
POS <- POS[-c(2:7)]
##
###### EWP MODELS
###
load("data/draftmod/ncaa_indi")
load("data/draftmod/euro")
load("data/draftmod/eu.inf")
ac <- read.csv("data/draftmod/agecurve.csv")
ac.lws <- loess(ac$Curve.cen ~ ac$Age, span = 1)
#
### NCAA
ncaa <- merge(ncaa, POS, by = "Name", all.x = T)
ncaa$OBS[ncaa$OBS < 0] <- 0
m1 <-     glm(OBS ~
I(predict(ac.lws, newdata= Age)) + I(MP/G) + SOS*MOV + EXP +
tmPTS + X2P + X3P + FT + X2PA + X3PA + I((tmX2PA - X2PA)/((tmX3PA - X3PA) + (tmX2PA - X2PA))) +
AST*TOV +
TRB + tmTRB +
STL + BLK + I(tmSTL - STL) + I(tmBLK - BLK) +
tmPF +
Height,
weights = MP, data = ncaa, family = quasipoisson)
fit <- data.frame("EWP" = as.data.frame(predict(m1, newdata = ncaa, type = "response", se.fit = TRUE))$fit)
ncaa.ewp <- data.frame("Name" = ncaa$Name, "League" = "NCAA", "Team" = ncaa$Tm, "Season" = ncaa$Season, "MP" = ncaa$MP, "OBS" = ncaa$OBS, fit)
ncaa.ewp <- subset(ncaa.ewp, !is.na(EWP))
for(i in 1:nrow(ncaa.ewp)){
compset <- c(ncaa.ewp$EWP[i], ncaa.ewp$EWP[ncaa.ewp$Name != ncaa.ewp$Name[i]])
obs <- na.omit(ncaa.ewp$OBS)
ncaa.ewp$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
}
ncaa.ewp$EWP <- ncaa.ewp$adj
ncaa.ewp <- ncaa.ewp[-ncol(ncaa.ewp)]
#
### EURO
#prep
obs.imp <- ncaa.ewp[order(ncaa.ewp$Season, decreasing = TRUE),]
obs.imp <- subset(obs.imp, !duplicated(Name))[c(1,7)]
euro$Name <- as.character(euro$Name)
obs.imp$Name <- as.character(obs.imp$Name)
euro <- merge(euro, obs.imp, by = "Name", all.x=T)
euro$OBS[is.na(euro$OBS)] <- euro$EWP[is.na(euro$OBS)]
euro <- euro[-ncol(euro)]
#run
euro$OBS[euro$OBS < 0] <- 0
for(i in 1:nrow(euro)){
euro$CBA[i] <- ifelse(eu.inf$League[eu.inf$Name == euro$Name[i] & eu.inf$Season == euro$Season[i]] == "CBA", 1, 0)
}
m2 <- glm(OBS ~
I(predict(ac.lws, newdata= Age)) +
PTS_tm + X2P + X3P + FT + X2PA + X3PA + I((X2PA_tm - X2PA)/((X3PA_tm - X3PA) + (X2PA_tm - X2PA))) +
AST*TOV +
DRB + I((ORB_tm + DRB_tm) - (ORB + DRB)) +
STL + BLK + I(STL_tm - STL) +
PF + I(PF_tm - PF) +
Height + CBA,
weights = ifelse(Age <= 22, MP*5, MP), data = euro, family = quasipoisson)
fit <- data.frame("EWP" = as.data.frame(predict(m2, newdata = euro, type = "response", se.fit = TRUE))$fit)
euro.ewp <- data.frame("Name" = euro$Name, "League" = NA, "Team" = NA, "Season" = euro$Season, "MP" = euro$MP, "OBS" = euro$OBS, fit)
euro.ewp <- subset(euro.ewp, !is.na(EWP))
euro.ewp$Name <- as.character(euro.ewp$Name)
eu.inf$Name <- as.character(eu.inf$Name)
eu.inf$Team <- as.character(eu.inf$Team)
for(i in 1:nrow(euro.ewp)){
lgs <- unique(eu.inf$League[eu.inf$Name == euro.ewp$Name[i] & eu.inf$Season == euro.ewp$Season[i]])
tms <- unique(eu.inf$Team[eu.inf$Name == euro.ewp$Name[i] & eu.inf$Season == euro.ewp$Season[i]])
#leagues
if(length(lgs) == 3){
euro.ewp$League[i] <- paste(lgs[1], lgs[2], lgs[3], sep = "/")
}else if(length(lgs) == 2){
euro.ewp$League[i] <- paste(lgs[1], lgs[2], sep = "/")
}else{
euro.ewp$League[i] <- as.character(lgs[1])
}
#teams
if(length(tms) == 3){
euro.ewp$Team[i] <- paste(tms[1], tms[2], tms[3], sep = "/")
}else if(length(tms) == 2){
euro.ewp$Team[i] <- paste(tms[1], tms[2], sep = "/")
}else{
euro.ewp$Team[i] <- as.character(tms[1])
}
}
for(i in 1:nrow(euro.ewp)){
compset <- c(euro.ewp$EWP[i], euro.ewp$EWP[euro.ewp$Name != euro.ewp$Name[i]])
obs <- na.omit(euro.ewp$OBS)
euro.ewp$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
}
euro.ewp$EWP <- euro.ewp$adj
euro.ewp <- euro.ewp[-ncol(euro.ewp)]
### Combine and organize NCAA and Euro
ewp <- rbind(ncaa.ewp, euro.ewp)
ewp <- ewp[order(ewp$Season, decreasing = T), ]
###########
##############
##########
#
## Humble model
#
# Scale draft order...
drft <- read.csv("data/draftmod/Drafts.csv", strip.white=T)
PICK <- merge(ewp, drft, by="Name", all.x=TRUE)
PICK <- subset(PICK, !is.na(Pick))
lws.pick <- loess(PICK$OBS ~ PICK$Pick, span=0.85)
####	Prep random forest data
hum.ncaa <- merge(ncaa.ewp, ncaa, by = c("Name", "Season", "MP", "OBS"), all.x = T)
hum.ncaa <- merge(hum.ncaa, drft, by = "Name", all.x = T)
hum.ncaa$Pick <- predict(lws.pick, newdata=hum.ncaa$Pick)
hum.ncaa <- subset(hum.ncaa, DRFT >= 1990)
hum.ncaa$Pick[is.na(hum.ncaa$Pick)] <- min(hum.ncaa$Pick, na.rm=T)
hum.euro <- merge(euro.ewp, euro, by = c("Name", "Season", "MP", "OBS"), all.x = T)
hum.euro <- merge(hum.euro, drft, by = "Name", all.x = T)
hum.euro$Pick <- predict(lws.pick, newdata=hum.euro$Pick)
hum.euro <- subset(hum.euro, DRFT >= 1990)
hum.euro$Pick[is.na(hum.euro$Pick)] <- min(hum.euro$Pick, na.rm=T)
#####
library(randomForest)
case.ncaa <- data.frame("Name" = hum.ncaa$Name, "Season" = hum.ncaa$Season)
case.euro <- data.frame("Name" = hum.euro$Name, "Season" = hum.euro$Season)
for(i in 1990:2015){
m1 <- randomForest(OBS ~
Pick + Age + EXP + EWP + SOS + MOV +
X2P + X3P + FT + X2PA + X3PA + FTA +
AST + TOV +
TRB +
STL + BLK + PF +
Height,
data = subset(hum.ncaa, Season != i), weights = MP, importance=TRUE, na.action=na.omit)
case.ncaa$PRD[hum.ncaa$Season == i] <- predict(m1, subset(hum.ncaa, Season == i))
}
ncaa.hum <- data.frame("Name" = case.ncaa$Name, "Season" = case.ncaa$Season, "HUM" = round(case.ncaa$PRD, 1))
ncaa.hum <- subset(ncaa.hum, !is.na(HUM))
for(i in 1:nrow(ncaa.hum)){
compset <- c(ncaa.hum$HUM[i], ncaa.hum$HUM[ncaa.hum$Name != ncaa.hum$Name[i]])
obs <- na.omit(ncaa.ewp$OBS)
ncaa.hum$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
}
ncaa.hum$HUM <- ncaa.hum$adj
ncaa.hum <- ncaa.hum[-ncol(ncaa.hum)]
#
for(i in 1990:2015){
m1 <- randomForest(OBS ~
Pick + Age + EWP +
X2P + X3P + FT + X2PA + X3PA + FTA +
AST + TOV +
DRB + ORB +
STL + BLK + PF +
Height + CBA,
data = subset(hum.euro, Season != i), weights = ifelse(Age <= 22, MP*5, MP), importance=TRUE, na.action=na.omit)
case.euro$PRD[hum.euro$Season == i] <- predict(m1, subset(hum.euro, Season == i))
}
euro.hum <- data.frame("Name" = case.euro$Name, "Season" = case.euro$Season, "HUM" = round(case.euro$PRD, 1))
euro.hum <- subset(euro.hum, !is.na(HUM))
for(i in 1:nrow(euro.hum)){
compset <- c(euro.hum$HUM[i], euro.hum$HUM[euro.hum$Name != euro.hum$Name[i]])
obs <- na.omit(euro.ewp$OBS)
euro.hum$adj[i] <- round(quantile(obs, (rank(compset, na.last = "keep")/max(rank(compset, na.last = "keep"), na.rm=T))[1]), 1)
}
euro.hum$HUM <- euro.hum$adj
euro.hum <- euro.hum[-ncol(euro.hum)]
### Combine all finished sections
hum <- rbind(ncaa.hum, euro.hum)
data <- merge(ewp, hum, by = c("Name", "Season"), all.x = T)
data <- data[order(data$Season, decreasing = T), ]
#######
#########  STAR MOD!!!
######
star <- data
star$PRB <- NA
star$PRB <- ifelse(!is.na(star$OBS) & star$OBS >= 2.5, 1, 0)
star$PRB <- ifelse(!is.na(star$OBS) & star$OBS >= 5, 2, star$PRB)
star$PRB <- ifelse(!is.na(star$OBS) & star$OBS >= 7.5, 3, star$PRB)
star$PRB <- ifelse(!is.na(star$OBS) & star$OBS >= 10, 4, star$PRB)
hldncaa <- ncaa[c(1,3,6:20,54,44:45,37:38)]
hldncaa$intl <- 0
hldeuro <- euro[c(1,2,4,6:19,47,37:38)]
hldeuro$MOV <- mean(hldncaa$MOV, na.rm=T)
hldeuro$SOS <- mean(hldncaa$SOS, na.rm=T)
hldeuro$DRB <- hldeuro$DRB + hldeuro$ORB
colnames(hldeuro)[11] <- "TRB"
hldeuro$intl <- 1
statplug <- rbind(hldncaa, hldeuro)
star <- merge(star, statplug, by = c("Name", "Season", "MP"), all.x = T)
library(nnet)
prb.mdl <- multinom(PRB ~
scale(HUM) + scale(EWP) + scale(PTS) + scale(X2PA) + scale(X3PA) + scale(FTA) +
scale(TRB) + scale(AST) + scale(TOV) +
scale(STL) + scale(BLK) + scale(PF) +
scale(Age) + scale(Height) + scale(Weight) +
scale(MOV) + scale(SOS) + intl
, data=star, weights = MP)
summary(prb.mdl)
PRB <- data.frame("PRB" = round(predict(prb.mdl, newdata=star, "probs"), digits=3))
colnames(PRB) <- c("BUST", "BNCH", "STRT", "STUD", "STAR")
star <- cbind(star, PRB)
data <- merge(data, star[c(1:8, 30:34)], by = c("Name", "Season", "League", "Team", "MP", "OBS", "EWP", "HUM"), all.x = T)
##########
##	Plug into draft history
#######
### plug retrodictions into drafted list
draft <- read.csv("data/draftmod/Drafts.csv")
draft <- subset(draft, DRFT >= 1990)
draft$Name <- as.character(draft$Name)
percent <- function(x, digits = 0, format = "f", ...) {
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
for(i in 1:nrow(draft)){
ego <- subset(data, Name == draft$Name[i] & Season <= draft$DRFT[i])
draft$League[i] <- as.character(ego$League[1])
draft$Team[i] <- as.character(ego$Team[1])
draft$MP[i] <- round(sum(ego$MP, na.rm = T), 0)
draft$EWP[i] <- round(weighted.mean(ego$EWP, ego$MP, na.rm = T), 1)
draft$HUM[i] <- round(weighted.mean(ego$HUM, ego$MP, na.rm = T), 1)
draft$BUST[i] <- round(weighted.mean(ego$BUST, ego$MP, na.rm = T), 2)
draft$BNCH[i] <- round(weighted.mean(ego$BNCH, ego$MP, na.rm = T), 2)
draft$STRT[i] <- round(weighted.mean(ego$STRT, ego$MP, na.rm = T), 2)
draft$STUD[i] <- round(weighted.mean(ego$STUD, ego$MP, na.rm = T), 2)
draft$STAR[i] <- round(weighted.mean(ego$STAR, ego$MP, na.rm = T), 2)
}
draft[draft == "NaN"] <- NA
draft$BUST[!is.na(draft$BUST)] <- percent(draft$BUST[!is.na(draft$BUST)])
draft$BNCH[!is.na(draft$BNCH)] <- percent(draft$BNCH[!is.na(draft$BNCH)])
draft$STRT[!is.na(draft$STRT)] <- percent(draft$STRT[!is.na(draft$STRT)])
draft$STUD[!is.na(draft$STUD)] <- percent(draft$STUD[!is.na(draft$STUD)])
draft$STAR[!is.na(draft$STAR)] <- percent(draft$STAR[!is.na(draft$STAR)])
draft <- draft[order(draft$Pick),]
draft <- draft[order(draft$DRFT, decreasing = T),]
draft <- merge(draft, POS, by = "Name", all.x = T)
#########
### OUTPUT ####
#########
data$MP <- round(data$MP, 0)
data$OBS <- round(data$OBS, 1)
data$BUST[!is.na(data$BUST)] <- percent(round(as.numeric(data$BUST[!is.na(data$BUST)]), 2))
data$BNCH[!is.na(data$BNCH)] <- percent(round(as.numeric(data$BNCH[!is.na(data$BNCH)]), 2))
data$STRT[!is.na(data$STRT)] <- percent(round(as.numeric(data$STRT[!is.na(data$STRT)]), 2))
data$STUD[!is.na(data$STUD)] <- percent(round(as.numeric(data$STUD[!is.na(data$STUD)]), 2))
data$STAR[!is.na(data$STAR)] <- percent(round(as.numeric(data$STAR[!is.na(data$STAR)]), 2))
data <- merge(data, POS, by = "Name", all.x = T)
write.csv(data, "data/draftmod/OUTPUT.FULL.csv", row.names = FALSE)
write.csv(draft, "data/draftmod/OUTPUT.DRAFT.csv", row.names = FALSE)
setwd("~/GitHub/bball/shiny")
library(shiny)
runApp("preds")
runApp("preds")
runApp("comps")
